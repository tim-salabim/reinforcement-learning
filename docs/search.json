[
  {
    "objectID": "easy21_assigment.html",
    "href": "easy21_assigment.html",
    "title": "Easy21",
    "section": "",
    "text": "In this document we develop a solution for the Easy21 assignment of the course.\nEasy21 is basically a modified version of Black Jack.\n\nRulesEx-1: ImplementationEx-2: Monte-Carlo Control\n\n\n\n\nThe rules outlined in the assignment for the card draw are:\n\nThe game is played with an infinite deck of cards (i.e. cards are sampled with replacement)\nEach draw from the deck results in a value between 1 and 10 (uniformly distributed) with a colour of red (probability 1/3) or black (probability 2/3).\nThere are no aces or picture (face) cards in this game\n\n\nRPython\n\n\n\ncard_values = 1:10\ncard_colors = c(\"red\", \"black\", \"black\")\n\ndrawCard = function(color) {\n  val = sample(card_values, 1)\n  if (missing(color)) {\n    color = sample(card_colors, 1)\n  }\n  \n  if (color == \"red\") {\n    val = -val\n  }\n  \n  return(val)\n}\n\ndrawCard(\"black\")\n\n[1] 10\n\ndrawCard(\"red\")\n\n[1] -1\n\nreplicate(10, drawCard())\n\n [1]  4  6 -4 10 -1 -3  6  9  3 -5\n\n\n\n\n\nimport random\n\nvalues = range(1, 11)\ncolors = [\"red\", \"black\", \"black\"]\n\ndef drawCard(color=None):\n  val = random.sample(values, 1).pop()\n\n  if color is None:\n    color = random.sample(colors, 1).pop()\n  \n  if color == \"red\":\n    val = val * -1\n  \n  return val\n\ndrawCard(\"black\")\n\n9\n\ndrawCard(\"red\")\n\n-6\n\ncards = [drawCard(\"black\")]\nfor i in range(9):\n  cards.append(drawCard())\n\ncards\n\n[4, 2, -3, 10, 6, 7, 7, -9, 1, -5]\n\n\n\n\n\n\n\n\nThe rules for playing of the game are:\n\nAt the start of the game both the player and the dealer draw one black card (fully observed)\nEach turn the player may either stick or hit\nIf the player hits then she draws another card from the deck\nIf the player sticks she receives no further cards\nThe values of the player’s cards are added (black cards) or subtracted (red cards)\n\n\nRPython\n\n\n\nhit = function(cards) {\n  new_card = drawCard()\n  c(cards, new_card)\n}\n\n# start\ncards = drawCard(\"black\")\ncards\n\n[1] 3\n\n# hit\nhit(cards)\n\n[1]  3 -9\n\n\n\n\n\ndef hit(cards):\n  new_card = drawCard()\n  return [cards, new_card]\n\n# start\ncards = drawCard(\"black\")\ncards\n\n4\n\n# hit\nhit(cards)\n\n[4, 2]\n\n\n\n\n\n\n\n\nThe rules for win/lose and associated rewards are:\n\nIf the player’s sum exceeds 21, or becomes less than 1, then she “goes bust” and loses the game (reward -1)\nIf the player sticks then the dealer starts taking turns. The dealer always sticks on any sum of 17 or greater, and hits otherwise. If the dealer goes bust, then the player wins; otherwise, the outcome – win (reward +1), lose (reward -1), or draw (reward 0) – is the player with the largest sum.\n\n\n\n\nPart 1 of the Easy21 Assignment:\n\nYou should write an environment that implements the game Easy21. Specifically, write a function, named \\(step\\), which takes as input a state \\(s\\) (dealer’s first card 1–10 and the player’s sum 1–21), and an action \\(a\\) (hit or stick), and returns a sample of the next state \\(s'\\) (which may be terminal if the game is finished) and reward \\(r\\). We will be using this environment for model-free reinforcement learning, and you should not explicitly represent the transition matrix for the MDP. There is no discounting (\\(\\gamma = 1\\)). You should treat the dealer’s moves as part of the environment, i.e. calling \\(step\\) with a stick action will play out the dealer’s cards and return the final reward and terminal state.\n\n\nRPython\n\n\n\nstep = function(\n    s = c(drawCard(\"black\"), drawCard(\"black\"))\n    , a = c(\"hit\", \"stick\")\n) {\n  a = match.arg(a)\n  r = 0\n  t = FALSE\n  # player hits - add next card\n  if (a == \"hit\") {\n    s[2] = sum(hit(s[2]))\n    if (s[2] &lt; 1 || s[2] &gt; 21) {\n      r = -1\n      t = TRUE\n    }\n    return(\n      list(\n        s = s\n        , r = r\n        , terminated = t\n      )\n    )\n  }\n  \n  # player sticks - play out game\n  if (a == \"stick\") {\n    if (s[1] &gt;= 17) {\n      if (s[1] &lt; 1 || s[1] &gt; 21) {\n        r = 1\n      } else if (s[2] &gt; s[1]) {\n        r = 1\n      } else if (s[1] &gt; s[2]) {\n        r = -1\n      }\n      return(\n        list(\n          s = s\n          , r = r\n          , terminated = TRUE\n        )\n      )\n    } else {\n      s[1] = sum(hit(s[1]))\n      s = step(s, \"stick\")\n      return(s)\n    }\n  }\n}\n\n# play first card and hit\ns1 = step(a = \"hit\")\ns1\n\n$s\n[1] 10  6\n\n$r\n[1] 0\n\n$terminated\n[1] FALSE\n\n# hit one more time then stick and let dealer play out\ns2 = step(s1$s, \"hit\")\nstep(s2$s, \"stick\")\n\n$s\n[1] 19 16\n\n$r\n[1] -1\n\n$terminated\n[1] TRUE\n\n\n\n\n\ndef step(s, a):\n  r = 0\n  \n  if a == \"hit\":\n    s[1] = sum(hit(s[1]))\n    \n    if s[1] &lt; 1 or s[1] &gt; 21:\n      r = -1\n    \n    return {\"s\": s, \"r\": r}\n  \n  if a == \"stick\":\n    if s[0] &gt;= 17:\n      if s[0] &lt; 1 or s[0] &gt; 21:\n        r = 1\n      elif s[1] &gt; s[0]:\n        r = 1\n      elif s[0] &gt; s[1]:\n        r = -1\n        \n      return {\"s\": s, \"r\": r}\n  \n    else:\n      s[0] = sum(hit(s[0]))\n      s = step(s, \"stick\")\n      return s\n\n# play first card and hit\ns1 = step(s = [drawCard(\"black\"), drawCard(\"black\")], a = \"hit\")\ns1\n\n{'s': [3, 12], 'r': 0}\n\n# hit one more time then stick and let dealer play out\ns2 = step(s1[\"s\"], \"hit\")\nstep(s2[\"s\"], \"stick\")\n\n{'s': [19, 20], 'r': 1}\n\n\n\n\n\n\n\n\nApply Monte-Carlo control to Easy21. Initialise the value function to zero. Use a time-varying scalar step-size of \\(\\alpha_{t} = 1/N(s_{t}, a_{t})\\) and an \\(\\epsilon\\)-greedy exploration strategy with \\(\\epsilon_{t} = N_{0}/(N_{0} + N(s_{t}))\\), where \\(N_{0} = 100\\) is a constant, \\(N(s)\\) is the number of times that state s has been visited, and \\(N(s, a)\\) is the number of times that action \\(a\\) has been selected from state \\(s\\). Feel free to choose an alternative value for \\(N_{0}\\), if it helps producing better results. Plot the optimal value function \\(V^{∗} (s) = max_{a} Q^{∗} (s, a)\\) using similar axes to the following figure taken from Sutton and Barto’s Blackjack example.\n\n\n\n\n\nRPython\n\n\n\nalpha = function(Na) {\n  1 / Na\n}\n\nepsilon = function(Ns, N0 = 100) {\n  N0 / (N0 + Ns)\n}\n\ngreedyAction = function(actions, values) {\n  if (length(actions) == 1) {\n    return(actions)\n  }\n  if (Reduce(identical, values)) {\n    return(NULL)\n  }\n  actions[which.max(values)]\n}\n  \nchooseAction = function(epsilon, greedy_action = NULL) {\n  action = sample(c(\"hit\", \"stick\"), 1)\n  if (!is.null(greedy_action)) {\n    action = sample(\n      c(greedy_action, action)\n      , 1\n      , prob = c(max(0, 1 - epsilon), epsilon)\n    )\n  }\n  return(action)\n}\n\nmcUpdate = function(value, reward, Ns, alpha) {\n  value + alpha * (reward - value) / Ns\n}\n\n# isPlayable = function(s) {\n#   s[1] &lt;= 10 & !(any(s &lt; 1) || any(s &gt; 21))\n# }\n\n\n\n\n\n\n\n\nlibrary(data.table)\n\nplayOneIteration = function(DT, state_to_play) {\n  DTin = copy(DT)\n  \n  # extract relevant states from DT\n  SDout = DTin[\n    state_dealer == state_to_play[1] & \n      state_player == state_to_play[2]\n  ]\n  \n  if (nrow(SDout) == 0) {\n    stop(\n      sprintf(\n        \"something went wrong, state %s not found\"\n        , state_to_play\n      )\n    )\n  }\n  \n  if (nrow(SDout) &gt; 1) {\n    stop(\"not implemented yet\")\n  }\n  \n  act = SDout[, action]\n  \n  # play next step and update original Na and reward\n  s1 = step(SDout[, c(state_dealer, state_player)], act)\n  SDout[, c(\"Na\", \"reward\") := list(Na + 1, s1$r)] \n  \n  # does new state s1 already exist in DTin?\n  nrw = nrow(\n    DTin[\n      state_dealer == s1$s[1] & \n        state_player == s1$s[2], \n    ]\n  )\n  \n  # if it does:\n  if (nrw != 0) {\n    stop(\n      sprintf(\n        \"state %s already exists, not implemented yet\"\n        , s1$s\n      )\n    )\n  }\n  \n  # if it doesn't:\n  ## FIXME here\n  \n  df = data.table(\n    state_dealer = s1$s[1]\n    , state_player = s1$s[2]\n    , action = chooseAction(epsilon(0))\n    , Na = 0\n    , Ns = 1\n    , reward = 0\n    , value = s1$r\n    , terminal = s1$terminated\n  )\n  \n  SDreturn = rbind(SDout, df)\n  \n  return(SDreturn)\n  \n}\n\n\nplayEpisonde = function(DT) {\n  DTout = playOneIteration(\n    DT\n    , state_to_play = c(DT$state_dealer, DT$state_player)\n  )\n  \n  while (!any(DTout[, terminal])) {\n    DTout = rbind(\n      DTout[-nrow(DTout), ]\n      , playOneIteration(\n        DTout\n        , DTout[nrow(DTout), c(state_dealer, state_player)]\n      )\n    )\n  }\n  \n  DTout = DTout[terminal == FALSE, ]\n  DTout\n  \n  DTout = DTout[\n    , value := mcUpdate(\n      value\n      , reward\n      , Ns\n      , alpha(Na)\n    )\n    , by = 1:nrow(DTout)\n  ]\n  \n  n = nrow(DTout)\n  values = DTout[, value]\n  \n  for (i in seq_len(n)) {\n    j = i - 1\n    if (i == 1) {\n      DTout[i, value := mean(tail(values, n))]\n    } else {\n      DTout[i, value := mean(tail(values, -j))]\n    }\n  }\n  \n  return(DTout)\n}\n\nplayers_cards = drawCard(\"black\")\ndealers_card = drawCard(\"black\")\n\ndf = data.table(\n  state_dealer = dealers_card\n  , state_player = players_cards\n  , action = chooseAction(epsilon(0))\n  , Na = 0\n  , Ns = 1\n  , reward = 0\n  , value = 0\n  , terminal = FALSE\n)\n\ndf\n\n   state_dealer state_player action Na Ns reward value terminal\n1:            5           10    hit  0  1      0     0    FALSE\n\njnk = playEpisonde(df)\nprint(jnk)\n\n   state_dealer state_player action Na Ns reward value terminal\n1:            5           10    hit  1  1      0  -0.5    FALSE\n2:            5           18  stick  1  1     -1  -1.0    FALSE\n\njnk2 = playEpisonde(df)\nprint(jnk2)\n\n   state_dealer state_player action Na Ns reward value terminal\n1:            5           10    hit  1  1      0  -0.5    FALSE\n2:            5            3  stick  1  1     -1  -1.0    FALSE\n\ntst = merge(\n  jnk\n  , jnk2\n  , by = c(\"state_dealer\", \"state_player\", \"action\")\n  , all = TRUE\n)\n\ncols = grep(\".x$|.y$\", names(tst), value = TRUE)\n\ntst[\n  , c(\"Na\", \"Ns\", \"reward\", \"value\", \"terminal\") := list(\n    sum(c(Na.x, Na.y), na.rm = TRUE)\n    , sum(c(Ns.x, Ns.y), na.rm = TRUE)\n    , sum(c(reward.x, reward.y), na.rm = TRUE)\n    , value = mean(c(value.x, value.y), na.rm = TRUE)\n    , FALSE\n  )\n  , by = 1:nrow(tst)\n][\n  , (cols) := NULL\n]\n\nprint(tst)\n\n   state_dealer state_player action Na Ns reward value terminal\n1:            5            3  stick  1  1     -1  -1.0    FALSE\n2:            5           10    hit  2  2      0  -0.5    FALSE\n3:            5           18  stick  1  1     -1  -1.0    FALSE"
  },
  {
    "objectID": "easy21_assigment.html#control-functions",
    "href": "easy21_assigment.html#control-functions",
    "title": "Easy21",
    "section": "",
    "text": "RPython\n\n\n\nalpha = function(Na) {\n  1 / Na\n}\n\nepsilon = function(Ns, N0 = 100) {\n  N0 / (N0 + Ns)\n}\n\ngreedyAction = function(actions, values) {\n  if (length(actions) == 1) {\n    return(actions)\n  }\n  if (Reduce(identical, values)) {\n    return(NULL)\n  }\n  actions[which.max(values)]\n}\n  \nchooseAction = function(epsilon, greedy_action = NULL) {\n  action = sample(c(\"hit\", \"stick\"), 1)\n  if (!is.null(greedy_action)) {\n    action = sample(\n      c(greedy_action, action)\n      , 1\n      , prob = c(max(0, 1 - epsilon), epsilon)\n    )\n  }\n  return(action)\n}\n\nmcUpdate = function(value, reward, Ns, alpha) {\n  value + alpha * (reward - value) / Ns\n}\n\n# isPlayable = function(s) {\n#   s[1] &lt;= 10 & !(any(s &lt; 1) || any(s &gt; 21))\n# }\n\n\n\n\n\n\n\n\nlibrary(data.table)\n\nplayOneIteration = function(DT, state_to_play) {\n  DTin = copy(DT)\n  \n  # extract relevant states from DT\n  SDout = DTin[\n    state_dealer == state_to_play[1] & \n      state_player == state_to_play[2]\n  ]\n  \n  if (nrow(SDout) == 0) {\n    stop(\n      sprintf(\n        \"something went wrong, state %s not found\"\n        , state_to_play\n      )\n    )\n  }\n  \n  if (nrow(SDout) &gt; 1) {\n    stop(\"not implemented yet\")\n  }\n  \n  act = SDout[, action]\n  \n  # play next step and update original Na and reward\n  s1 = step(SDout[, c(state_dealer, state_player)], act)\n  SDout[, c(\"Na\", \"reward\") := list(Na + 1, s1$r)] \n  \n  # does new state s1 already exist in DTin?\n  nrw = nrow(\n    DTin[\n      state_dealer == s1$s[1] & \n        state_player == s1$s[2], \n    ]\n  )\n  \n  # if it does:\n  if (nrw != 0) {\n    stop(\n      sprintf(\n        \"state %s already exists, not implemented yet\"\n        , s1$s\n      )\n    )\n  }\n  \n  # if it doesn't:\n  ## FIXME here\n  \n  df = data.table(\n    state_dealer = s1$s[1]\n    , state_player = s1$s[2]\n    , action = chooseAction(epsilon(0))\n    , Na = 0\n    , Ns = 1\n    , reward = 0\n    , value = s1$r\n    , terminal = s1$terminated\n  )\n  \n  SDreturn = rbind(SDout, df)\n  \n  return(SDreturn)\n  \n}\n\n\nplayEpisonde = function(DT) {\n  DTout = playOneIteration(\n    DT\n    , state_to_play = c(DT$state_dealer, DT$state_player)\n  )\n  \n  while (!any(DTout[, terminal])) {\n    DTout = rbind(\n      DTout[-nrow(DTout), ]\n      , playOneIteration(\n        DTout\n        , DTout[nrow(DTout), c(state_dealer, state_player)]\n      )\n    )\n  }\n  \n  DTout = DTout[terminal == FALSE, ]\n  DTout\n  \n  DTout = DTout[\n    , value := mcUpdate(\n      value\n      , reward\n      , Ns\n      , alpha(Na)\n    )\n    , by = 1:nrow(DTout)\n  ]\n  \n  n = nrow(DTout)\n  values = DTout[, value]\n  \n  for (i in seq_len(n)) {\n    j = i - 1\n    if (i == 1) {\n      DTout[i, value := mean(tail(values, n))]\n    } else {\n      DTout[i, value := mean(tail(values, -j))]\n    }\n  }\n  \n  return(DTout)\n}\n\nplayers_cards = drawCard(\"black\")\ndealers_card = drawCard(\"black\")\n\ndf = data.table(\n  state_dealer = dealers_card\n  , state_player = players_cards\n  , action = chooseAction(epsilon(0))\n  , Na = 0\n  , Ns = 1\n  , reward = 0\n  , value = 0\n  , terminal = FALSE\n)\n\ndf\n\n   state_dealer state_player action Na Ns reward value terminal\n1:            5           10    hit  0  1      0     0    FALSE\n\njnk = playEpisonde(df)\nprint(jnk)\n\n   state_dealer state_player action Na Ns reward value terminal\n1:            5           10    hit  1  1      0  -0.5    FALSE\n2:            5           18  stick  1  1     -1  -1.0    FALSE\n\njnk2 = playEpisonde(df)\nprint(jnk2)\n\n   state_dealer state_player action Na Ns reward value terminal\n1:            5           10    hit  1  1      0  -0.5    FALSE\n2:            5            3  stick  1  1     -1  -1.0    FALSE\n\ntst = merge(\n  jnk\n  , jnk2\n  , by = c(\"state_dealer\", \"state_player\", \"action\")\n  , all = TRUE\n)\n\ncols = grep(\".x$|.y$\", names(tst), value = TRUE)\n\ntst[\n  , c(\"Na\", \"Ns\", \"reward\", \"value\", \"terminal\") := list(\n    sum(c(Na.x, Na.y), na.rm = TRUE)\n    , sum(c(Ns.x, Ns.y), na.rm = TRUE)\n    , sum(c(reward.x, reward.y), na.rm = TRUE)\n    , value = mean(c(value.x, value.y), na.rm = TRUE)\n    , FALSE\n  )\n  , by = 1:nrow(tst)\n][\n  , (cols) := NULL\n]\n\nprint(tst)\n\n   state_dealer state_player action Na Ns reward value terminal\n1:            5            3  stick  1  1     -1  -1.0    FALSE\n2:            5           10    hit  2  2      0  -0.5    FALSE\n3:            5           18  stick  1  1     -1  -1.0    FALSE"
  }
]